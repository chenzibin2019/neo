#pragma once

#include "mb-app/mb-app.hpp"
#include <stack>
#include <unordered_map>
#include <vector>
#include <string>
#include <experimental/filesystem>

namespace filesystem = std::experimental::filesystem;
class CacheProxy : public MB_App
{
private:
    int server_pid;
    std::vector<char *> proxy_argv;
    std::string proxy_config;
    // internal state of the server
    std::unordered_map<std::string, int> host_access_count;
    std::stack<std::string> host_access_history;
    std::streampos log_pos;
    ;

public:
    CacheProxy(const std::shared_ptr<cpptoml::table>&);
    ~CacheProxy() override;

    void init() override;
    void reset() override;
    int shutnclean();
    void config_file_rewrite(const std::string& config_content, const bool use_default);
    void execute(const std::string& command, std::string& retval);
    std::string extract_column(const std::string& delimiter, const std::string& original, const int index);
};
