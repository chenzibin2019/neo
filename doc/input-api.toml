##
## Network configuration
##

[[nodes]]
    name = "<string>"
    type = "generic" or "middlebox" # default: generic
    [[nodes.interfaces]]        # optional
    name = "<string>"
    ipv4 = "<ip addr w mask>"   # optional
    vlans = [1, 3, 6, 100]      # optional
    [[nodes.static_routes]]     # optional
    network = "<ip prefix>"
    next_hop = "<ip addr>"
    adm_dist = 1                # optional (1..254), default: 1
    [[nodes.installed_routes]]  # optional
    network = "<ip prefix>"
    next_hop = "<ip addr>"
    adm_dist = 254              # optional (1..254), default: 255
[[nodes]]
    name = "<string>"
    type = "middlebox"
    env = "netns"
    app = "netfilter"
    timeout = 100               # microseconds
    rp_filter = 0               # optional (0..2), default: 0
    # 0 - No source validation.
    # 1 - Strict mode as defined in RFC3704 Strict Reverse Path
    #     Each incoming packet is tested against the FIB and if the interface
    #     is not the best reverse path the packet check will fail.
    #     By default failed packets are discarded.
    # 2 - Loose mode as defined in RFC3704 Loose Reverse Path
    #     Each incoming packet's source address is also tested against the FIB
    #     and if the source address is not reachable via any interface the
    #     packet check will fail.
    rules = "<string>"
[[nodes]]
    name = "<string>"
    type = "middlebox"
    env = "netns"
    app = "ipvs"
    timeout = 100               # microseconds
    config = "<string>"
[[nodes]]
    name = "<string>"
    type = "middlebox"
    env = "netns"
    app = "squid"
    timeout = 100               # microseconds
    config = "<string>"

# undirected (only need to specify once for each link)
[[links]]
    node1 = "<name>"
    intf1 = "<name>"
    node2 = "<name>"
    intf2 = "<name>"


##
## OpenFlow configuration
##

[openflow]
    [[openflow.updates]]
    node = "<name>"
    network = "<ip prefix>"
    outport = "<egress interface name>"


##
## Policies
##

#
# Single-connection policies (must have 1 connection spec):
#   - reachability (flow will reach the target(s))
#   - reply-reachability (<reachability> and reply flow will come back)
#   - waypoint (flow will pass through the target(s) (don't have to be accepted))
#
[[policies]]
    type = "reachability"
    target_node = "<node name regex>"
    reachable = true or false
    [[policies.connections]]    # < connection spec >
    protocol = "tcp", "udp", or "icmp-echo"
    src_node = "<node name regex>"
    dst_ip = "<ip prefix or addr>"
    src_port = 12345                # optional
    dst_port = [80, 443]            # optional, default: all interesting ports
    owned_dst_only = true or false  # optional, default: false
[[policies]]
    type = "reply-reachability"
    target_node = "<node name regex>"
    reachable = true or false
    [[policies.connections]]
    # < connection spec >
[[policies]]
    type = "waypoint"
    target_node = "<node name regex>"
    pass_through = true or false
    [[policies.connections]]
    # < connection spec >

#
# Multi-connection policies (can have multiple, concurrent connection specs):
#   - one-request (only one request will reach the target(s))
#   - loadbalance (the dispersion index wrt the targets will always <= the maximum)
#
[[policies]]
    type = "one-request"
    target_node = "<node name regex>"
    [[policies.connections]]
    # < connection spec >
[[policies]]
    type = "loadbalance"
    target_node = "node name regex"
    max_dispersion_index = 1        # optional, default: 1
    [[policies.connections]]
    # < connection spec >

#
# Policies with multiple correlated sub-policies
# (each sub-policy is executed sequentially):
#   - conditional (chain of implication: A -> B -> C -> ...)
#   - consistency (true if all sub-policies have the same result)
#
[[policies]]
    type = "conditional"
    [[policies.correlated_policies]]
    # < any single-connection policy >
[[policies]]
    type = "consistency"
    [[policies.correlated_policies]]
    # < any single-connection policy >
